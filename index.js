let contacts = [
    {
        name: 'Friends',
        people: [
            {
                name: 'Ram',
                emailid: 'ram@gmail.com',
                number: '9876543210'
            },
            {
                name: 'Rahul',
                emailid: 'rahul@gmail.com',
                number: '9876543211'
            }
        ]
    },
    {
        name: 'Family',
        people: [
            {
                name: 'Bhaiya',
                emailid: 'sunil@gmail.com',
                number: '9876543212'
            },
            {
                name: 'Mom',
                number: '9876543213'
            }
        ]
    }
];

class Contact {
    constructor( config ) {
        this.name = config.name;
        this.emailid = config.emailid;
        this.number = config.number;
    }

    setContainer( container ) {
        this.container = container;
        this.render();
    }

    render() {
        const template = `
            <div class="person">
                <div class="person-name">Name: <span>${this.name}</span></div>
                <div>Email id: <span>${this.emailid}</span></div>
                <div>Number: <span>${this.number}</span></div>
            </div>
        `;

        this.container.innerHTML = template;
    }
}

class Group {
    constructor( config ) {
        this.name = config.name;
        this.contacts = config.people.map( person => new Contact( person ) )
    }

    setContainer( container ) {
        this.container = container;
        this.render();
    }

    renderContact( contact, idx ) {
        const wrapper = document.createElement( 'div' );
        wrapper.classList.add( 'contact-wrapper' );
        wrapper.setAttribute( 'id', `contact-${this.name}-${idx}` );

        this.contactsWrapper.appendChild( wrapper );
        contact.setContainer( wrapper );
    }

    render() {
        const template = `
            <div class="group">
                <h2 class="group-name">${this.name}</h2>
                <hr class="divider" />
                <div class="contacts-wrapper"></div>
                <button class="add-contact">Add contact</button>
                <form class="add-contact-form hide">
                    <div>Name: <input type="text" name="name" class="add-contact-form-name" /></div>
                    <div>Emailid: <input type="email" name="emailid" class="add-contact-form-emailid" /></div>
                    <div>Phone number: <input type="tel" name="number" class="add-contact-form-number" /></div>
                    <button class="add-contact-from-button">Add it</button>
                </form>
            </div>
        `;
        this.container.innerHTML = template;

        // make sure to call this.container.querySelector() instead of document.querySelector() in order to search within the group-wrapper only
        this.contactsWrapper = this.container.querySelector( '.contacts-wrapper' );

        this.contacts.forEach(this.renderContact.bind(this));


        // set up events handlers
        
        // one appraoch to selecting the right DOM node (based on unique id generated by us)
        // document.querySelector( `#group-${this.name} .add-contact` )

        // another approach is to limit the search for DOM node to within the container we are working with (like we selected contactsWrapper above, and add-contact button below)

        // event handler for click of add contact button
         this.container.querySelector( '.add-contact' ).addEventListener( 'click', () => { // arrow function will carry over context of render()
            this.container.querySelector( '.add-contact-form' ).classList.remove( 'hide' );
        });

        // event handler for submit of add contact form
        this.container.querySelector( '.add-contact-form' ).addEventListener( 'submit', event => { // arrow function to carry over context
            // prevent form submission and add contact details to the contacts array, and have the new contact appear under the group
            event.preventDefault();

            const newContact = new Contact({
                // name: this.container.querySelector( '[name="name"]' )
                name: this.container.querySelector( '.add-contact-form-name' ).value,
                emailid: this.container.querySelector( '.add-contact-form-emailid' ).value,
                number: this.container.querySelector( '.add-contact-form-number' ).value
            });

            this.contacts.push(newContact);
            this.renderContact(newContact,this.contacts.length - 1);


            console.log( contactList );
        });
    }
}

class ContactList {
    constructor( config ) {
        this.groups = config.map( group => new Group( group ) );
    }

    setContainer( container ) {
        this.container = container;
        this.render();
    }

    render() {
        // var that = this;
        this.groups.forEach(( group, idx ) => {
            // console.log( that ); // undefined
            const wrapper = document.createElement( 'div' );
            wrapper.classList.add( 'group-wrapper');
            wrapper.setAttribute( 'id', `group-${group.name}` );
            this.container.appendChild( wrapper );
            group.setContainer( wrapper );
        });
    }
}

const contactList = new ContactList( contacts );
contactList.setContainer( document.querySelector( '.contact-list' ) );